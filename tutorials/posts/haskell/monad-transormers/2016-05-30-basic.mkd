The monad stack IO is generally at the bottom, also find many with state transformer
`MonadT1 MonadT2 IO`
`MaybeT IO` just like `IO Int`, `Maybe Int`

weave an action into the do steps, weave multiple actions into the do steps, weave it more natively with Monad Transformers

```
mgreet :: MaybeT IO ()
mgreet = do
  liftIO $ putStr "What is your name?" -- MaybeT IO ()
  n <- liftIO getLine                  -- MaybeT IO String
  liftIO $ putStrLn $ "Hello, " ++ n   -- MaybeT IO ()
```

every monad has a run function

`runMaybeT :: MaybeT IO a -> IO (Maybe a)`

`runMaybeT mgreet`

```
askFor :: String -> MaybeT IO String
askFor prompt = do
  liftIO $ putStr $ "What is your " ++ prompt ++ " (type END to quit)?"
  r <- liftIO getLine
  if r == "End"
    then MaybeT (return Nothing)
    else MaybeT (return (Just r))
    
survey :: IO (Maybe (String, String))
survey = 
  runMaybeT $ do 
    a <- askFor "name"
    b <- askFor "favorite color"
    return (a,b)
```


```
askFor :: String -> MaybeT IO String
askFor prompt = do
  liftIO $ putStr $ "What is your " ++ prompt ++ " (type END to quit)?"
  r <- liftIO getLine
  if r == "End"
    then mzero -- break out of the monad
    else return r  -- continue, returning r
```

`const x _ = x` take a second value, but ignore it
Is useful for passing to higher-order functions when you don't need all their flexibility.

`x >> y = x >>= const y`, in the right hand side, run y and ignore the value x
`x >> y = x >>= \_ -> y`
`(<$) :: a -> f b -> f a`
`(<$) = fmap . const` forgets input
`id` is useful for point free style

map (const 42) [1..5] `[42,42,42,42,42,42,42,42,42,42,42]`

SKI combintator calculsu

[Stackoverflow : Simplest non-trivial monad transfomer example for "dummies", IO+Maybe](http://stackoverflow.com/a/32582127), Eric R.

[Building Monad Transformers - Part 1](http://blog.jakubarnold.cz/2014/07/22/building-monad-transformers-part-1.html) Jakub Arnold

[A Gentle Introduction to Monad Transformers](https://github.com/kqr/gists/blob/master/articles/gentle-introduction-monad-transformers.md) kqr


```
Maybe
Reader
Writer
State
Custom
```

pass configurations
state
handle errors
write logs
perform IO

associate with each transformer a typeclass specifying its operation.