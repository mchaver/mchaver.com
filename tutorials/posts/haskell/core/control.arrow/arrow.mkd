```
let f = (+2)
let g = (+3)

(f &&& g) 2 -- (4,5)
(f *** g) (2,3) -- (4,6)
first f 1 -- (3,1)
second f 2 -- (1,3)

second f <<< (f &&& g) $ 2 -- (4,5) ... (4,7)
(f &&& g) >>> second f $ 2 -- (4,5) ... (4,7)

uncurry (/) (1,2) -- 0.5

(f &&& g) >>> second f >>>> (uncurry (+)) $ 2 -- (4,5) ... (4,7) ... 11
```

define uncurry, tuple 

`(<<<) = (.)`
`(>>>) = flip (.)`

```
Combinator 	What it does(specialised to (->)) 	Alternatives
(>>>) 	flip (.)  
first 	\f (x, y) -> (f x, y) 	first (Data.Bifunctor)
second 	\f (x, y) -> (x, f y) 	fmap; second (Data.Bifunctor)
(***) 	\f g (x, y) -> (f x, g y) 	bimap (Data.Bifunctor)
(&&&) 	\f g x -> (f x, g x) 	liftA2 (,) (Control.Applicative)
left 	Maps over Left case. 	first (Data.Bifunctor)
right 	Maps over Right case. 	fmap; second (Data.Bifunctor)
(+++) 	Maps over both cases. 	bimap (Data.Bifunctor)
(|||) 	Eliminates Either. 	either (Data.Either)
app 	\(f, x) -> f x 	uncurry ($)
```

```
class Category y => Arrow y where
    -- Minimal implementation: arr and first
    arr    :: (a -> b) -> y a b                 -- converts function to arrow
    first  :: y a b -> y (a, c) (b, c)          -- maps over first component

    second :: y a b -> y (c, a) (c, b)          -- maps over second component
    (***)  :: y a c -> y b d -> y (a, b) (c, d) -- first and second combined
    (&&&)  :: y a b -> y a c -> y a (b, c)      -- (***) on a duplicated value
```

[Haskell/Understanding arrows](https://en.wikibooks.org/wiki/Haskell/Understanding_arrows)
[Haskell/Arrow tutorial](https://en.wikibooks.org/wiki/Haskell/Arrow_tutorial)
[StackOverflow : What are arrows, and how can I use them?](http://stackoverflow.com/a/4196622) John L